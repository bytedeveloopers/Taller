generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===================== ENUMS =====================
enum UserRole {
  ADMIN
  TECNICO
  RECEPCIONISTA
  CLIENTE
}

enum BlockType {
  VACATION
  SICK_LEAVE
  TRAINING
  OTHER
}

enum VehicleEstado {
  INGRESO
  DIAGNOSTICO
  DESARME // Proceso desarme
  ESPERA
  ARMADO // Proceso armado
  PRUEBA // En prueba
  FINALIZADO
  RECEPCION
}

// ===================== MODELOS =====================
model User {
  id                   Int      @id @default(autoincrement())
  email                String   @unique
  password             String?
  nombre               String?
  role                 UserRole @default(CLIENTE)
  is_active            Boolean  @default(true)
  must_change_password Boolean  @default(true)
  phone                String?

  // 1‚Äì1 con Tecnico (ya lo ten√≠as)
  tecnico Tecnico?

  // back-relation como autor de notas internas
  notasCreadas TecnicoNota[] @relation("UserNotas")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tecnico {
  id             Int     @id @default(autoincrement())
  nombre         String
  telefono       String?
  especialidad   String?
  habilidades    String? // legacy CSV
  skills         Json? // JSON array ["Motor","Frenos"]
  capacidad      Int     @default(8)
  carga          Int     @default(0)
  horario_inicio String?
  horario_fin    String?
  notas          String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // ‚¨á‚¨á ahora S√ç existe el modelo y el nombre de la relaci√≥n
  bloqueos TecnicoBloqueo[] @relation("TecnicoBloqueos")

  // notas internas (hist√≥rico)
  notasInternas TecnicoNota[] @relation("TecnicoNotas")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  JobOrder  JobOrder[]
}

model TecnicoBloqueo {
  id Int @id @default(autoincrement())

  tecnicoId Int
  // empareja con Tecnico.bloqueos
  tecnico   Tecnico @relation("TecnicoBloqueos", fields: [tecnicoId], references: [id], onDelete: Cascade)

  startDate DateTime
  endDate   DateTime
  reason    String?
  type      BlockType // o String si prefieres libre

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tecnicoId])
}

model TecnicoNota {
  id Int @id @default(autoincrement())

  tecnicoId Int
  // empareja con Tecnico.notasInternas
  tecnico   Tecnico @relation("TecnicoNotas", fields: [tecnicoId], references: [id], onDelete: Cascade)

  authorId Int?
  // empareja con User.notasCreadas
  author   User? @relation("UserNotas", fields: [authorId], references: [id], onDelete: SetNull)

  titulo    String?
  body      String
  pinned    Boolean @default(false)
  isPrivate Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tecnicoId])
  @@index([authorId])
}

model Client {
  id String @id @default(uuid())

  // ================= Informaci√≥n Personal =================
  name      String
  phone     String  @unique // Asumimos que el tel√©fono es √∫nico
  email     String? @unique // Asumimos que el email es √∫nico (opcional)
  alt_phone String? @map("altPhone") // Alternativo: si usas camelCase en la DB, omite @map
  address   String?

  // ================= Preferencias y Configuraci√≥n =================
  contact_preference String  @map("contactPreference") // 'PHONE', 'WHATSAPP', 'EMAIL'
  labels             String? // Etiquetas separadas por comas (ej: "VIP,FLOTA")
  notes              String?
  pickup_points      String? @map("pickupPoints") // Puntos de recogida

  // ================= Consents y Estado =================
  consents  String? // JSON de los consentimientos (ej: {"marketing": true, "sms": false})
  is_active Boolean @default(true) @map("isActive") // Cliente activo

  // ================= Tiempos =================
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // ================= Relaciones (Opcional) =================
  // job_orders       JobOrder[] // Relaci√≥n con √≥rdenes de trabajo
  // vehicles         Vehicle[]  // Relaci√≥n con veh√≠culos
  Vehicle Vehicle[]

  // Puedes usar @@map para renombrar la tabla si es necesario
  @@map("Client")
}

model Vehicle {
  id                   String        @id @default(uuid())
  brand                String
  model                String
  year                 Int
  color                String? // üëà NUEVO (o conf√≠rmalo si ya existe)
  kmActual             Int           @default(0)
  licensePlate         String? // opcional: puedes borrarlo si no lo usas
  vin                  String? // opcional: puedes borrarlo si no lo usas
  proximoMantenimiento DateTime?
  clienteId            String
  cliente              Client        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  activo               Boolean       @default(true)
  estadoActual         VehicleEstado @default(INGRESO)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  JobOrder             JobOrder[]
  Evidencia            Evidencia[]
}

model JobOrder {
  id        String  @id @default(uuid())
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // Asignaci√≥n
  tecnicoId Int?
  tecnico   Tecnico? @relation(fields: [tecnicoId], references: [id], onDelete: SetNull)

  // Flujo
  estado      VehicleEstado @default(INGRESO)
  prioridad   Int           @default(3) // 1 alta, 5 baja
  descripcion String?

  // Fechas
  fechaIngreso DateTime  @default(now())
  fechaSalida  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([estado])
  @@index([tecnicoId])
  @@map("JobOrder")
}

model Evidencia {
  id        String  @id @default(uuid())
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  titulo String?
  url    String // ruta/URL del archivo (foto/video/pdf)
  tipo   String? // "image/jpeg", "video/mp4", etc.
  nota   String?

  createdAt DateTime @default(now())

  @@index([vehicleId])
  @@map("Evidencia")
}
