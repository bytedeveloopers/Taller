generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model client {
  id                String      @id
  name              String
  phone             String      @unique(map: "Client_phone_key")
  email             String?     @unique(map: "Client_email_key")
  altPhone          String?
  address           String?
  contactPreference String
  labels            String?
  notes             String?
  pickupPoints      String?
  consents          String?
  isActive          Boolean     @default(true)
  created_at        DateTime    @default(now())
  updated_at        DateTime
  joborder          joborder[]
  recepcion         recepcion[]
  vehicle           vehicle[]
}

model evidencia {
  id        String   @id
  vehicleId String
  titulo    String?
  url       String
  tipo      String?
  nota      String?
  createdAt DateTime @default(now())
  vehicle   vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade, map: "Evidencia_vehicleId_fkey")

  @@index([vehicleId], map: "Evidencia_vehicleId_idx")
}

model joborder {
  id           String          @id
  vehicleId    String
  tecnicoId    Int?
  estado       joborder_estado @default(INGRESO)
  prioridad    Int             @default(3)
  descripcion  String?
  fechaIngreso DateTime        @default(now())
  fechaSalida  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  clientId     String?
  client       client?         @relation(fields: [clientId], references: [id], map: "JobOrder_clientId_fkey")
  tecnico      tecnico?        @relation(fields: [tecnicoId], references: [id], map: "JobOrder_tecnicoId_fkey")
  vehicle      vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade, map: "JobOrder_vehicleId_fkey")
  recepcion    recepcion?

  @@index([clientId], map: "JobOrder_clientId_fkey")
  @@index([estado], map: "JobOrder_estado_idx")
  @@index([tecnicoId], map: "JobOrder_tecnicoId_idx")
  @@index([vehicleId], map: "JobOrder_vehicleId_fkey")
}

model recepcion {
  id                String          @id
  clientId          String
  vehicleId         String
  jobOrderId        String          @unique
  recibidoPorUserId Int?
  kmEntrada         Int
  placaEntrada      String?
  observaciones     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  client            client          @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "Recepcion_clientId_fkey")
  joborder          joborder        @relation(fields: [jobOrderId], references: [id], onDelete: Cascade, map: "Recepcion_jobOrderId_fkey")
  user              user?           @relation(fields: [recibidoPorUserId], references: [id], map: "Recepcion_recibidoPorUserId_fkey")
  vehicle           vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade, map: "Recepcion_vehicleId_fkey")
  recepcionfoto     recepcionfoto[]

  @@index([clientId])
  @@index([jobOrderId])
  @@index([recibidoPorUserId])
  @@index([vehicleId])
}

model recepcionfoto {
  id          String             @id
  recepcionId String
  tipo        recepcionfoto_tipo
  url         String
  nota        String?
  createdAt   DateTime           @default(now())
  recepcion   recepcion          @relation(fields: [recepcionId], references: [id], onDelete: Cascade, map: "RecepcionFoto_recepcionId_fkey")

  @@index([recepcionId])
}

model tecnico {
  id             Int              @id @default(autoincrement())
  nombre         String
  telefono       String?
  especialidad   String?
  habilidades    String?
  skills         String?          @db.LongText
  capacidad      Int              @default(8)
  carga          Int              @default(0)
  horario_inicio String?
  horario_fin    String?
  notas          String?
  userId         Int              @unique(map: "Tecnico_userId_key")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  joborder       joborder[]
  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Tecnico_userId_fkey")
  tecnicobloqueo tecnicobloqueo[]
  tecniconota    tecniconota[]
}

model tecnicobloqueo {
  id        Int                 @id @default(autoincrement())
  tecnicoId Int
  startDate DateTime
  endDate   DateTime
  reason    String?
  type      tecnicobloqueo_type
  createdAt DateTime            @default(now())
  updatedAt DateTime
  tecnico   tecnico             @relation(fields: [tecnicoId], references: [id], onDelete: Cascade, map: "TecnicoBloqueo_tecnicoId_fkey")

  @@index([tecnicoId], map: "TecnicoBloqueo_tecnicoId_idx")
}

model tecniconota {
  id        Int      @id @default(autoincrement())
  tecnicoId Int
  authorId  Int?
  titulo    String?
  body      String
  pinned    Boolean  @default(false)
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user?    @relation(fields: [authorId], references: [id], map: "TecnicoNota_authorId_fkey")
  tecnico   tecnico  @relation(fields: [tecnicoId], references: [id], onDelete: Cascade, map: "TecnicoNota_tecnicoId_fkey")

  @@index([authorId], map: "TecnicoNota_authorId_idx")
  @@index([tecnicoId], map: "TecnicoNota_tecnicoId_idx")
}

model user {
  id                   Int           @id @default(autoincrement())
  email                String        @unique(map: "User_email_key")
  password             String?
  nombre               String?
  role                 user_role     @default(CLIENTE)
  is_active            Boolean       @default(true)
  must_change_password Boolean       @default(true)
  phone                String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  recepcion            recepcion[]
  tecnico              tecnico?
  tecniconota          tecniconota[]
}

model vehicle {
  id                   String               @id
  brand                String
  model                String
  year                 Int
  vin                  String?
  licensePlate         String?
  activo               Boolean              @default(true)
  estadoActual         vehicle_estadoActual @default(INGRESO)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  clienteId            String
  color                String?
  kmActual             Int                  @default(0)
  proximoMantenimiento DateTime?
  evidencia            evidencia[]
  joborder             joborder[]
  recepcion            recepcion[]
  client               client               @relation(fields: [clienteId], references: [id], onDelete: Cascade, map: "Vehicle_clienteId_fkey")

  @@index([clienteId], map: "Vehicle_clienteId_fkey")
}

enum recepcionfoto_tipo {
  FRONTAL
  TRASERO
  LATERAL_IZQ
  LATERAL_DER
  DANIO
}

enum joborder_estado {
  INGRESO
  DIAGNOSTICO
  DESARME
  ESPERA
  ARMADO
  PRUEBA
  FINALIZADO
  RECEPCION
}

enum user_role {
  ADMIN
  TECNICO
  RECEPCIONISTA
  CLIENTE
}

enum tecnicobloqueo_type {
  VACATION
  SICK_LEAVE
  TRAINING
  OTHER
}

enum vehicle_estadoActual {
  INGRESO
  DIAGNOSTICO
  DESARME
  ESPERA
  ARMADO
  PRUEBA
  FINALIZADO
  RECEPCION
}
